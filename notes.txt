Next:
* Arithmetic with Variables
* Direct creation of systems: var1.connect(systems.DeadTime(0.5, var2))
  * Arithmetic is something like that, but with static systems
* Better passing of the variable_wrapper, the system should do this itself
* Better handling of time functions
* Protection against overwriting a Variable instance with the value
* SystemRunner
* Recorder
* PiecewiseFunction
* Connecting to constant/function input
* There should be different Variable subclasses instead of large elifs   

Goal:
* Setting pendulum.mass.position or pendulum.spring.displacement must be the
  same thing.
  We don't want a pendulum.position, because we don't want to duplicate every
  single internal value.
* We'll need a mechanism for enumerating (a) variables and (b) subsystems
  
Open questions:
* Make sure that all inputs are connected?
* Do we distinguish between internal values and outputs? Between inputs and
  outputs? Parameters and inputs?
* setting initial values from outside
* subsystems (e. g. vehicle with 4 wheels)
* visualization (also internal values: pwm values in a motor controller system,
  integral error in a PID controller)
